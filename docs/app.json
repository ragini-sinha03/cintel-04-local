[{"name": "app.py", "content": "# Import necessary libraries\nimport plotly.express as px  # For creating interactive visualizations\nfrom palmerpenguins import load_penguins  # To load the penguins dataset\nfrom shiny.express import input, ui, render  # For creating the UI and handling user input\nfrom shinywidgets import render_plotly  # For rendering Plotly plots\nimport seaborn as sns  # Not used in this code but useful for visualizations\nfrom shiny import reactive  # To create reactive functions\n\n# Load the penguins dataset into a variable\npenguins = load_penguins()\n\n# Set up the page options for the Shiny app\nui.page_opts(title=\"Penguins Data\", fillable=True)\n\n# Create a sidebar for user interaction\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\", open=\"open\"):\n    ui.h2(\"Sidebar\")  # Header for the sidebar\n\n    # Dropdown menu for selecting an attribute to visualize\n    ui.input_selectize(\n        \"selected_attribute\",  # ID for the input\n        \"Select column to visualize\",  # Label for the input\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],  # Options\n        selected=\"bill_length_mm\"  # Default selected option\n    )\n\n    # Numeric input for specifying the number of bins in the histogram\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly bin numeric\", 1, min=1, max=10)\n\n    # Checkbox group for selecting species to filter the data\n    ui.input_checkbox_group(\n        \"selected_species_list\",  # ID for the input\n        \"Select a species\",  # Label for the input\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],  # Species options\n        selected=[\"Adelie\"],  # Default selected option\n        inline=True  # Display options inline\n    )\n\n    ui.hr()  # Horizontal line as a divider\n\n# Main content area with visualizations\nwith ui.layout_columns():\n    # Card for the Plotly Histogram\n    with ui.card():\n        ui.card_header(\"Plotly Histogram\")  # Title for the card\n\n        @render_plotly  # Decorator for rendering a Plotly plot\n        def plotly_histogram():\n            # Create and return a histogram based on user input\n            return px.histogram(\n                filtered_data(),  # Data to visualize\n                x=input.selected_attribute(),  # X-axis attribute from user selection\n                nbins=input.plotly_bin_count(),  # Number of bins for the histogram\n                color=\"species\"  # Color by species\n            )\n\n    # Card for the Data Table\n    with ui.card():\n        ui.card_header(\"Data Table\")  # Title for the card\n\n        @render.data_frame  # Decorator for rendering a data frame\n        def data_table():\n            # Return a DataTable of the filtered data\n            return render.DataTable(filtered_data())\n\n# Additional layout for more visualizations\nwith ui.layout_columns():\n    # Card for the Plotly Scatterplot\n    with ui.card():\n        ui.card_header(\"Plotly Scatterplot: Species\")  # Title for the card\n\n        @render_plotly  # Decorator for rendering a Plotly plot\n        def plotly_scatterplot():\n            # Create and return a scatterplot based on the filtered data\n            return px.scatter(\n                data_frame=filtered_data(),  # Data to visualize\n                x=\"body_mass_g\",  # X-axis variable\n                y=\"bill_depth_mm\",  # Y-axis variable\n                color=\"species\",  # Color by species\n                labels={\"bill_depth_mm\": \"Bill Depth (mm)\", \"body_mass_g\": \"Body Mass (g)\"}  # Custom labels\n            )\n\n    # Card for Summary Statistics\n    with ui.card():\n        ui.card_header(\"Summary Statistics\")  # Title for the card\n\n        @render.data_frame  # Decorator for rendering a data frame\n        def summary_table():\n            # Calculate summary statistics and return the result\n            summary = penguins.describe()  # Get summary statistics\n            return summary.reset_index()  # Reset index for better display\n\n# Reactive function to filter data based on selected species\n@reactive.calc  # This function will automatically update when inputs change\ndef filtered_data():\n    selected_species = input.selected_species_list()  # Get selected species from user input\n    # Return only the rows of penguins that match the selected species\n    return penguins[penguins[\"species\"].isin(selected_species)]", "type": "text"}, {"name": "penguins.csv", "content": "", "type": "text"}]